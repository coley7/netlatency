#!/usr/bin/env python

# Copyright (c) 2018, Kontron Europe GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

import argparse
import copy
import dateutil.parser
import json
import numpy
import sys

from collections import OrderedDict

from os import environ
if environ.get('DISPLAY') is None:
    import matplotlib as mpl
    mpl.use('Agg')
import matplotlib.pyplot as plt


def plot(data):
    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(9, 4))

    all_data = []
    labels = []

    for k,v in data.iteritems():
        if k == 'rx-program':
            continue
        if k == 'rx-kernel-driver':
            continue
        if k == 'rx-hardware':
            continue
        if k == 'interval-start':
            continue
        all_data.append(v)
        labels.append(k)

    ax.boxplot(all_data)

    # adding horizontal grid lines
    ax.yaxis.grid(True)
    ax.set_xticks([y + 1 for y in range(len(all_data))])
    ax.set_ylabel('Observed values')

    # add x-tick labels
    plt.setp(ax, xticks=[y + 1 for y in range(len(all_data))],
             xticklabels=labels)
    return plt


def update_data(data, ts, max_val=100):
    values = map(lambda v: int(numpy.datetime64(v)) % 1000000, ts['values'])
    for (i,n) in enumerate(ts['names']):
        if n not in data:
            data[n] = list((values[i],))
        else:
            data[n].append(values[i])

def main(args=None):
    parser = argparse.ArgumentParser(
        description='trace')
    parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
                        help='Input file (default is STDIN)', default=sys.stdin)
    parser.add_argument('outfile', nargs='?', type=str,
                        help='Output file (default is None, open X window)',
                        default=None)
    args = parser.parse_args(args)

    data = OrderedDict()

    try:
        for line in args.infile:
            line = line.strip()
            if not line:
                continue

            try:
                j = json.loads(line)
                ts = j['object']['timestamps']
                update_data(data, ts)
                sys.stdout.flush()

            except ValueError as e:
                print(e, file=sys.stderr)
                pass
    except KeyboardInterrupt as e:
        pass

    print(data)

    plt = plot(data)
    if args.outfile:
        plt.savefig(args.outfile, dpi=300)
    else:
        try:
            plt.show()
        except KeyboardInterrupt:
            pass


if __name__ == '__main__':
    main()
