#!/usr/bin/env python

# Copyright (c) 2018, Kontron Europe GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

# to disable warnings generated by building the font cache
import warnings
warnings.filterwarnings('ignore')

import argparse
import json
import numpy as np
import sys

from os import environ
if environ.get('DISPLAY') is None:
    import matplotlib as mpl
    mpl.use('Agg')
import matplotlib.pyplot as plt


def add_subplot_data(plt, data):
    max_val = data['max']
    min_val = data['min']
    counts = data['count']
    outliers = data['outliers']
    y = data['histogram']
    x = range(0, len(data['histogram']))

    plt.bar(x, y)
    plt.yscale('log')
    t = 'counts: %s, min: %s $\mu$s, max: %s $\mu$s outliers: %s' % (
            counts, min_val, max_val, outliers)
    ax = plt.gca()
    plt.text(1, 1, t, transform=ax.transAxes, verticalalignment='top',
            horizontalalignment='right')


def plot(rxtimestamps, txtimestamps, jitter):
    plt.figure(figsize=(10,8))
    plt.suptitle('TSN latency and jitter report', fontsize=14,
            fontweight='bold')

    plt.subplot(2, 2, (1,2))
    plt.title('Scheduled times')
    plt.grid(True)
    plt.xlabel('Latency ($\mu$s)')
    plt.ylabel('Packets')
    add_subplot_data(plt, rxtimestamps)

    plt.subplot(2, 2, 3)
    plt.title('RT Application latency')
    plt.grid(True)
    plt.xlabel('Latency ($\mu$s)')
    plt.ylabel('Packets')
    add_subplot_data(plt, txtimestamps)

    plt.subplot(2, 2, 4)
    plt.title('TSN Network Jitter')
    plt.grid(True)
    plt.xlabel('Jitter (ns)')
    plt.ylabel('Packets')
    add_subplot_data(plt, jitter)

    plt.subplots_adjust(top=0.90, hspace=0.4, bottom=0.15)
    plt.gcf().text(0.01, 0.01, 'start: %s\nend: %s' % (rxtimestamps['start-timestamp'],
        rxtimestamps['end-timestamp']))

def plot_output(outfile=None):
    if outfile:
        plt.savefig(outfile)
    else:
        try:
            plt.show()
        except KeyboardInterrupt:
            pass


def main(args=None):
    parser = argparse.ArgumentParser(
        description='reportgen')
    parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
                        help='Input file (default is STDIN)', default=sys.stdin)
    parser.add_argument('outfile', nargs='?', type=str,
                        help='Output file (default is None, open X window)',
                        default=None)
    args = parser.parse_args(args)

    j = None
    a = None
    b = None
    c = None
    try:
        for line in args.infile:
            try:
                j = json.loads(line)
                if j['type'] == 'histogram-rt-latency':
                    b = j['object']
                if j['type'] == 'histogram-scheduled-times':
                    a = j['object']
            except ValueError:
                pass
    except KeyboardInterrupt:
        for line in args.infile:
            try:
                j = json.loads(line)
                if j['type'] == 'histogram-rt-latency':
                    b = j['object']
                if j['type'] == 'histogram-scheduled-times':
                    a = j['object']
            except ValueError:
                pass


    plot(a, b, b)
    plot_output(args.outfile)


if __name__ == '__main__':
    main()
