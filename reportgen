#!/usr/bin/env python

# Copyright (c) 2018, Kontron Europe GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# to disable warnings generated by building the font cache
import warnings
warnings.filterwarnings('ignore')

from __future__ import print_function

import argparse
import json
import numpy as np
import sys

from os import environ
if environ.get('DISPLAY') is None:
    import matplotlib as mpl
    mpl.use('Agg')
import matplotlib.pyplot as plt


def plot(data):
    max_val = data['max']
    min_val = data['min']
    counts = data['count']
    outliers = data['outliers']
    y = data['histogram']
    x = range(0, len(data['histogram']))

    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.grid(True)
    ax.set_xlabel('latency ($\mu$s)')
    ax.set_ylabel('count')
    ax.bar(x, y)

    # Y-axes log scale only works if a non '0' entry is found
    if np.any(y):
        plt.yscale('log')
    else:
        plt.yscale('linear')

    plt.title('start: %s,\nend: %s,\ncounts: %s, min: %s $\mu$s, max: %s $\mu$s outliers: %s' \
            % (data['start-timestamp'], data['end-timestamp'], counts, min_val, max_val, outliers))


def plot_output(outfile=None):
    if outfile:
        plt.savefig(outfile)
    else:
        try:
            plt.show()
        except KeyboardInterrupt:
            pass


def main(args=None):
    parser = argparse.ArgumentParser(
        description='reportgen')
    parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
                        help='Input file (default is STDIN)', default=sys.stdin)
    parser.add_argument('outfile', nargs='?', type=str,
                        help='Output file (default is None, open X window)',
                        default=None)
    args = parser.parse_args(args)

    j = None
    try:
        for line in args.infile:
            try:
                j = json.loads(line)
            except ValueError:
                pass
    except KeyboardInterrupt:
        for line in args.infile:
            try:
                j = json.loads(line)
            except ValueError:
                pass

    if j:
        if j['type'] == 'histogram':
            plot(j['object'])
            plot_output(args.outfile)


if __name__ == '__main__':
    main()
